import rodados.*
import pedidos.*

describe "test de rodados" {

  const deportes = new Dependencia(empleados=45)
  const cultura = new Dependencia(empleados=31)
  const cachito = new Corsa(color="rojo")
  const pedido1 = new Pedido(distancia=960,tiempoMaximo=8,pasajeros=4,coloresIncompatibles=#{"azul","negro"})
  const pedido2 = new Pedido(distancia=960,tiempoMaximo=5,pasajeros=4,coloresIncompatibles=#{"azul","negro"})

  method initialize() {
    deportes.agregarAFlota(cachito)
    deportes.agregarAFlota(new Corsa(color="azul"))
    deportes.agregarAFlota(new Corsa(color="verde"))
    deportes.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    deportes.agregarAFlota(new Especial(capacidad=5,velocidadMaxima=160,peso=1200,color="beige"))
    cultura.agregarAFlota(cachito)
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional=false))
    cultura.agregarAFlota(trafic)
    trafic.interior(popular)
    trafic.motor(bataton)
    deportes.agregarPedido(pedido1)
    deportes.agregarPedido(pedido2)
  }
  test "deportes tiene peso total 6450" {
    assert.equals(1300+1300+1300+1350+1200,deportes.pesoTotalFlota())
  }

  test "cultura tiene peso total 10700" {
    assert.equals(1300+1350+1350+1200+5500,cultura.pesoTotalFlota())
  }

  test "la flota de deportes esta bien equipada" {
    assert.that(deportes.estaBienEquipada())
  }

  test "la flota de cultura no esta bien equipada" {
    assert.notThat(cultura.estaBienEquipada())
  }

  test "la capacidad total en color azul de deportes es 7" {
    assert.equals(7,deportes.capacidadTotalEnColor("azul"))
  }

  test "el total de pasajeros de los pedidos de deportes es 8" {
    assert.equals(8,deportes.totalPasajerosEnPedidos())
  }

  test "el conjunto con el pedido2 no puede ser satisfecho" {
    assert.equals(#{pedido2},deportes.pedidosNoPuedenSerSatisfechos())
  }

  test "el pedido1 puede ser satisfecho por 1 rodado" {
    assert.that(deportes.hayAlgunRodadoqueSatisfacerUnPedido(pedido1))
  }

  test "el pedido2 no puede ser satisfecho por ning√∫n rodado" {
    assert.notThat(deportes.hayAlgunRodadoqueSatisfacerUnPedido(pedido2))
  }

  test "todos los pedidos tienen el color azul como incompatible" {
    assert.that(deportes.todosLosPedidosTienenIncompatible("azul"))
  }

  test "todos los pedidos no tienen el color rojo como incompatible" {
    assert.notThat(deportes.todosLosPedidosTienenIncompatible("rojo"))
  }
}

